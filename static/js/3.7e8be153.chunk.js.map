{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","error","className","s","profileDataForm","onSubmit","fullName","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","onClick","formSummaryError","ProfileData","isOwner","goToEditMode","profileData","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","descriptionBlock","profilePhotoBlock","profilePhoto","alt","src","photos","large","userPhoto","target","files","length","initialValues","classname","formData","then","Post","post","item","img","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postsElement","posts","p","id","reverse","postsBlock","AddNewPostFormRedux","values","addPost","newPostText","Field","component","name","placeholder","validate","required","btn","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","store","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,aAAe,kCAAkC,kBAAoB,uCAAuC,SAAW,8BAA8B,OAAS,4BAA4B,YAAc,iCAAiC,QAAU,+B,oBCA9TD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,IAAM,uB,oBCA3DD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,QAAU,yBAAyB,IAAM,qBAAqB,MAAQ,yB,oBCAjID,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,QAAU,sBAAsB,WAAa,2B,0KCyCpGC,EAxCgB,SAACC,GAAU,MAGRC,oBAAS,GAHD,mBAGjCC,EAHiC,KAGvBC,EAHuB,OAIZF,mBAASD,EAAMI,QAJH,mBAIjCA,EAJiC,KAIzBC,EAJyB,KAKtCC,oBAAU,WACND,EAAUL,EAAMI,SACjB,CAACJ,EAAMI,SAWV,OACI,8BACMF,GACF,6BACI,0BAAMK,cAdO,WACrBJ,GAAY,KAcKH,EAAMI,QAAU,cAI5BF,GACD,6BACI,2BACIM,SAfO,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAedC,WAAW,EACXC,OArBW,WACvBV,GAAY,GACZH,EAAMc,aAAaV,IAoBPO,MAAOP,O,iBCeZW,EADkBC,YAAU,CAACC,KAAM,gBAAjBD,CA3CT,SAAC,GAA0D,IAAzDE,EAAwD,EAAxDA,QAASd,EAA+C,EAA/CA,OAAQU,EAAuC,EAAvCA,aAAcK,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MACnE,OAAO,0BAAMC,UAAWC,IAAEC,gBAAiBC,SAAUL,GACjD,yBAAKE,UAAWC,IAAEG,UACd,yCACCC,YAAY,YAAa,WAAY,GAAIC,MAE9C,yBAAKN,UAAWC,IAAElB,QACd,kBAAC,EAAD,CACIiB,UAAWC,IAAElB,OACbA,OAAQA,EACRU,aAAcA,KAGtB,6BACI,iDACCY,YAAY,GAAI,iBAAkB,GAAIC,IAAO,CAACC,KAAM,cAEzD,6BACI,sDACCF,YAAY,yBAA0B,4BAA6B,GAAIG,MAE5E,6BACI,wCACCH,YAAY,WAAY,UAAW,GAAIG,MAE5C,6BACI,uCADJ,KACsBC,OAAOC,KAAKb,EAAQc,UAAUC,IAAI,SAAAC,GACpD,OAAO,yBAAKA,IAAKA,EAAKb,UAAWC,IAAEa,SAC/B,2BAAID,GADD,IACWR,YAAYQ,EAAK,YAAcA,EAAK,GAAIP,SAI9D,6BACI,4BAAQS,QAAS,cAAjB,QAGChB,GAAS,yBAAKC,UAAWC,IAAEe,kBACvBjB,OCoBXkB,EAAc,SAAC,GAA4D,IAA3DpB,EAA0D,EAA1DA,QAASd,EAAiD,EAAjDA,OAAQU,EAAyC,EAAzCA,aAAcyB,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aAC1D,OAAO,yBAAKnB,UAAWC,IAAEmB,aACrB,yBAAKpB,UAAWC,IAAEG,UACbP,EAAQO,UAEb,yBAAKJ,UAAWC,IAAElB,QACd,kBAAC,EAAD,CACIiB,UAAWC,IAAElB,OACbA,OAAQA,EACRU,aAAcA,KAGtB,6BACI,iDADJ,IAC+BI,EAAQwB,eAAiB,MAAQ,MAG5DxB,EAAQwB,gBAAkB,6BACtB,sDADsB,IACUxB,EAAQyB,2BAGhD,6BACI,wCADJ,IACsBzB,EAAQ0B,SAE9B,6BACI,uCADJ,KACsBd,OAAOC,KAAKb,EAAQc,UAAUC,IAAI,SAAAC,GACpD,OAAO,kBAAC,EAAD,CAASA,IAAKA,EAAKW,aAAcX,EAAKY,aAAc5B,EAAQc,SAASE,QAGhF,6BACKK,GAAW,4BAAQH,QAASI,GAAjB,WAMlBO,EAAU,SAAC,GAAkC,IAAjCF,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAC5B,OAAO,yBAAKzB,UAAWC,IAAEa,SACrB,2BAAIU,GADD,KACqBC,IAIjBE,EAjGK,SAAC,GAAsE,IAArE9B,EAAoE,EAApEA,QAASqB,EAA2D,EAA3DA,QAASU,EAAkD,EAAlDA,UAAW7C,EAAuC,EAAvCA,OAAQU,EAA+B,EAA/BA,aAAcoC,EAAiB,EAAjBA,YAAiB,EACxDjD,oBAAS,GAD+C,mBACjFC,EADiF,KACvEC,EADuE,KAGtF,IAAKe,EACD,OAAO,kBAAC,IAAD,MAcX,OACI,6BACI,yBAAKG,UAAWC,IAAE6B,kBACd,yBAAK9B,UAAWC,IAAE8B,mBACd,6BACI,yBAAK/B,UAAWC,IAAE+B,aAAcC,IAAI,GAAGC,IAAKrC,EAAQsC,OAAOC,OAASC,OAExE,6BAEQnB,GAAW,2BAAOX,KAAM,OAAQpB,SArB5B,SAACC,GACrBA,EAAEkD,OAAOC,MAAMC,QACfZ,EAAUxC,EAAEkD,OAAOC,MAAM,SAuBpB1D,EACK,kBAAC,EAAD,CACE4D,cAAe5C,EACf6C,UAAWzC,IAAEmB,YACbvB,QAASA,EACTd,OAAQA,EACRU,aAAcA,EACdU,SA3BH,SAACwC,GACdd,EAAYc,GACPC,KACG,WACI9D,GAAY,QAyBV,kBAAC,EAAD,CACE4D,UAAWzC,IAAEmB,YACbvB,QAASA,EACTd,OAAQA,EACRU,aAAcA,EACdyB,QAASA,EACTC,aAAc,WACVrC,GAAY,S,4CCpCzB+D,EAfF,SAAClE,GACV,OACI,yBAAKqB,UAAWC,IAAE6C,MACd,yBAAK9C,UAAWC,IAAE8C,MACd,yBAAKb,IAAKvD,EAAMqE,IAAKf,IAAI,KACzB,yBAAKjC,UAAWC,IAAEgD,SACbtE,EAAMsE,UAGf,yBAAKjD,UAAWC,IAAEiD,YACd,yCADJ,IAC0BvE,EAAMuE,c,gBCNtCC,EAAcC,YAAiB,IAE/BC,EAAUC,IAAMC,KAAK,SAAA5E,GACvB,IAAI6E,EAAe7E,EAAM8E,MAAM7C,IAAI,SAAA8C,GAAC,OAChC,kBAAC,EAAD,CAAMT,QAASS,EAAET,QAASC,WAAYQ,EAAER,WAAYrC,IAAK6C,EAAEC,GAAIX,IAAKU,EAAEV,QAASY,UAQnF,OACI,yBAAK5D,UAAWC,IAAE4D,YACd,wCAIA,kBAACC,EAAD,CAAqB3D,SAVb,SAAC4D,GACbpF,EAAMqF,QAAQD,EAAOE,gBAUjB,yBAAKjE,UAAWC,IAAEwD,OACbD,MAsBXM,EAAsBnE,YAAU,CAACC,KAAM,yBAAjBD,CAhBL,SAAChB,GACpB,OACI,0BAAMqB,UAAWC,IAAE+D,QAAS7D,SAAUxB,EAAMmB,cACxC,kBAACoE,EAAA,EAAD,CACIC,UAAW3D,IACX4D,KAAK,cACLC,YAAY,qBACZC,SAAU,CAACC,IAAUpB,KAEzB,6BACI,4BAAQnD,UAAWC,IAAEuE,KAArB,gBAQDnB,I,QC7BAoB,EAFUC,YAfD,SAACC,GACrB,MAAO,CACHlB,MAAOkB,EAAMC,YAAYnB,MACzBQ,YAAaU,EAAMC,YAAYX,cAIZ,SAACY,GACxB,MAAO,CACHb,QAAS,SAACC,GACNY,EAASC,YAAqBb,OAKjBS,CAA6CrB,GCCvD0B,EAhBC,SAACpG,GACb,OACI,yBAAKqB,UAAWC,IAAEJ,SACd,yBAAKG,UAAWC,IAAE+C,MAClB,kBAAC,EAAD,CACI9B,QAASvC,EAAMuC,QACfrB,QAASlB,EAAMkB,QACfd,OAAQJ,EAAMI,OACdU,aAAcd,EAAMc,aACpBmC,UAAWjD,EAAMiD,UACjBC,YAAalD,EAAMkD,cAEvB,kBAAC,EAAD,CAAkBmD,MAAOrG,EAAMqG,U,eCVrCC,E,yLAEE,IAAIC,EAASC,KAAKxG,MAAMyG,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKxG,MAAM2G,mBAEhBH,KAAKxG,MAAM4G,QAAQC,KAAK,UAGhCL,KAAKxG,MAAM8G,eAAeP,GAC1BC,KAAKxG,MAAM+G,UAAUR,K,0CAIrBC,KAAKQ,mB,yCAGUC,EAAWC,EAAWC,GACjCX,KAAKxG,MAAMyG,MAAMC,OAAOH,SAAWU,EAAUR,MAAMC,OAAOH,QAC1DC,KAAKQ,mB,+BAKT,OACI,kBAAC,EAAD,iBAAaR,KAAKxG,MAAlB,CACSuC,SAAUiE,KAAKxG,MAAMyG,MAAMC,OAAOH,OAClCrF,QAASsF,KAAKxG,MAAMkB,QACpBd,OAAQoG,KAAKxG,MAAMI,OACnBU,aAAc0F,KAAKxG,MAAMc,aACzBmC,UAAWuD,KAAKxG,MAAMiD,UACtBC,YAAasD,KAAKxG,MAAMkD,mB,GA/BdyB,IAAMyC,WA4CtBC,sBACXtB,YARkB,SAACC,GAAD,MAAY,CAC9B9E,QAAS8E,EAAMC,YAAY/E,QAC3Bd,OAAQ4F,EAAMC,YAAY7F,OAC1BuG,iBAAkBX,EAAMsB,KAAKf,OAC7BgB,OAAQvB,EAAMsB,KAAKC,SAIM,CAACT,mBAAgBC,cAAWjG,iBAAcmC,cAAWC,kBAC9EsE,IAFWH,CAIbf","file":"static/js/3.7e8be153.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1EDAG\",\"profilePhoto\":\"ProfileInfo_profilePhoto__3w1wE\",\"profilePhotoBlock\":\"ProfileInfo_profilePhotoBlock__1UTkC\",\"fullName\":\"ProfileInfo_fullName__2ja5d\",\"status\":\"ProfileInfo_status__3hXEC\",\"profileData\":\"ProfileInfo_profileData__196v4\",\"contact\":\"ProfileInfo_contact__1rJei\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__Yw_5B\",\"img\":\"Profile_img__3TrwR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__rFgRQ\",\"addPost\":\"MyPosts_addPost__2s4Tn\",\"btn\":\"MyPosts_btn__3Y4H7\",\"posts\":\"MyPosts_posts__2f6-n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__I9142\",\"item\":\"Post_item__2QDz1\",\"message\":\"Post_message__2A-6X\",\"likesCount\":\"Post_likesCount__W_OZV\"};","import React, {useState, useEffect} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    //хуки\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>\r\n                        {props.status || \"No status\"}\r\n                    </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deActivateEditMode}\r\n                    value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\nconst ProfileDataForm = ({profile, status, updateStatus, handleSubmit, error}) => {\r\n    return <form className={s.profileDataForm} onSubmit={handleSubmit}>\r\n        <div className={s.fullName}>\r\n            <b>Full name:</b>\r\n            {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div className={s.status}>\r\n            <ProfileStatusWithHooks\r\n                className={s.status}\r\n                status={status}\r\n                updateStatus={updateStatus}\r\n            />\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b>\r\n            {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n        <div>\r\n            <b>My Professional skills:</b>\r\n            {createField(\"My Professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me:</b>\r\n            {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}</b> {createField(key, \"contacts.\" + key, [], Input)}\r\n            </div>\r\n        })}\r\n        </div>\r\n        <div>\r\n            <button onClick={() => {\r\n            }}>save\r\n            </button>\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n        </div>\r\n    </form>\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/preloader\";\r\nimport userPhoto from \"../../../assets/images/user.svg\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, isOwner, savePhoto, status, updateStatus, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData)\r\n            .then(\r\n                () => {\r\n                    setEditMode(false);\r\n                })\r\n    };\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.profilePhotoBlock}>\r\n                    <div>\r\n                        <img className={s.profilePhoto} alt=\"\" src={profile.photos.large || userPhoto}/>\r\n                    </div>\r\n                    <div>\r\n                        {\r\n                            isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        initialValues={profile}\r\n                        classname={s.profileData}\r\n                        profile={profile}\r\n                        status={status}\r\n                        updateStatus={updateStatus}\r\n                        onSubmit={onSubmit}\r\n                    />\r\n                    : <ProfileData\r\n                        classname={s.profileData}\r\n                        profile={profile}\r\n                        status={status}\r\n                        updateStatus={updateStatus}\r\n                        isOwner={isOwner}\r\n                        goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}\r\n                    />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProfileData = ({profile, status, updateStatus, isOwner, goToEditMode}) => {\r\n    return <div className={s.profileData}>\r\n        <div className={s.fullName}>\r\n            {profile.fullName}\r\n        </div>\r\n        <div className={s.status}>\r\n            <ProfileStatusWithHooks\r\n                className={s.status}\r\n                status={status}\r\n                updateStatus={updateStatus}\r\n            />\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {\r\n            profile.lookingForAJob && <div>\r\n                <b>My Professional skills:</b> {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me:</b> {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n        <div>\r\n            {isOwner && <button onClick={goToEditMode}>edit</button>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n//для формирования контактов\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <div className={s.item}>\r\n                <img src={props.img} alt=\"\"/>\r\n                <div className={s.message}>\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n            <div className={s.likesCount}>\r\n                <span>Likes: </span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElement = props.posts.map(p => (\r\n        <Post message={p.message} likesCount={p.likesCount} key={p.id} img={p.img}/>)).reverse();\r\n\r\n    // СОЗДАНИЕ ПОСТА\r\n    //функция добавления поста\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My posts</h2>\r\n            {/*\r\n            Форма добавления поста\r\n            */}\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form className={s.addPost} onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component={Textarea}\r\n                name=\"newPostText\"\r\n                placeholder=\"Enter your message\"\r\n                validate={[required, maxLength10]}\r\n            />\r\n            <div>\r\n                <button className={s.btn}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;","// import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.img}></div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer store={props.store}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}//если userId=undefined то я владелец страницы, если Id есть, то нет\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n    //withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}